public class quickSort {
    public static void main(String[] args) {
        int[] arr = {6, 3, 9, 5, 2, 8};
        int n = arr.length;
        QuickSort(arr, 0, n-1);

        for(int i=0; i<n; i++) {
            System.out.print(arr[i] + " ");
        }
    }

    public static void QuickSort(int[] arr, int low, int high) {
        if(low < high) {
            int pidx = partition(arr, low, high);

            QuickSort(arr, low, pidx -1);
            QuickSort(arr, pidx +1, high);
        }
    }

    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low -1;

        for(int j=low; j<high; j++) {
            if(arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        i++;
        int temp = arr[i];
        arr[i] = pivot;
        arr[high] = temp;
        return i;
    }
}

/* Time complexcity: average and best case: O(nlogn)
                     worst case: O(n^2)
    Recursive so stack space vary from logn to n
    
    Better way to take pivot:
        1.) Select middle element as pivot.
        2.) Select random element as pivot.
*/
